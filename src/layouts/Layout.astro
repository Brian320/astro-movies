---
import '../styles/styles.css';
import Footer from "../components/Footer.astro";
import Nav from "../components/Nav.astro";

export interface Props {
	title: string;
}

const { title } = Astro.props as Props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
		<script>
      navigation.addEventListener('navigate', navigateEvent => {
        if (shouldNotIntercept(navigateEvent)) return;

        const toUrl = new URL(navigateEvent.destination.url);
				const toPath = toUrl.pathname;
				const fromPath = location.pathname;

				if (location.origin !== toUrl.origin) return;

				const transition = document.createDocumentTransition();
				const navigationType = getNavigationType(fromPath, toPath)
				const isBack = isBackNavigation(navigateEvent);

				if (navigationType === 'home-to-movie') {
					const id = toPath.split('/')[2];
          navigateEvent.intercept({
            async handler() {
							const thumbnail = document.getElementById(`movie-poster-${id}`);
							if (thumbnail) {
								thumbnail.style.pageTransitionTag = 'movie-poster';
							}

              const response = await fetch('/fragments/MovieDetails/' + id);
              const data = await response.text();

              transition.start(() => {
								if (thumbnail) {
									thumbnail.style.pageTransitionTag = '';
								}

								document.getElementById('container').scrollTop = 0

								updateTheDOMSomehow(data)
							})
            },
          });
				}

				if (navigationType === 'movie-to-home') {
					const id = fromPath.split('/')[2];
          navigateEvent.intercept({
						scroll: 'manual',
            async handler() {
              const response = await fetch('/fragments/MovieList');
              const data = await response.text()
							const tempHomePage = document.createElement('div')
							const moviePoster = document.getElementById(`movie-poster`);
							let thumbnail

							// If the movie poster is not in the home page, removes the transition style so that
							// the poster doesn't stay on the page while transitioning
							tempHomePage.innerHTML = data
							if (!id || !tempHomePage.querySelector(`#movie-poster-${id}`)) {
								if (moviePoster) {
									moviePoster.classList.remove('movie-poster');
								}
							}

              transition.start(() => {
								updateTheDOMSomehow(data)

								if (id) {
									thumbnail = document.getElementById(`movie-poster-${id}`);
									if (thumbnail) {
										thumbnail.scrollIntoViewIfNeeded()
										thumbnail.style.pageTransitionTag = 'movie-poster';
									}
								}
							}).then(() => {
								if (thumbnail) {
									thumbnail.style.pageTransitionTag = '';
								}
							});
            },
          });
				}

				if (navigationType === 'movie-to-person') {
					const movieId = fromPath.split('/')[2];
					const personId = toPath.split('/')[2];

          navigateEvent.intercept({
            async handler() {
              const response = await fetch('/fragments/PersonDetails/' + personId);
              const data = await response.text();
							let personThumbnail
							let moviePoster
							let movieThumbnail

							if (!isBack) {
								// Removes the transition style so that the poster doesn't stay on the page
								// while transitioning
								moviePoster = document.getElementById(`movie-poster`);
								if (moviePoster) {
									moviePoster.classList.remove('movie-poster');
								}

								personThumbnail = document.getElementById(`person-photo-${personId}`);
								if (personThumbnail) {
									personThumbnail.style.pageTransitionTag = 'person-photo';
								}
							}

              transition.start(() => {
								updateTheDOMSomehow(data)

								if (personThumbnail) {
									personThumbnail.style.pageTransitionTag = '';
								}

								if (isBack) {
									movieThumbnail = document.getElementById(`movie-poster-${movieId}`);
									if (movieThumbnail) {
										movieThumbnail.scrollIntoViewIfNeeded()
										movieThumbnail.style.pageTransitionTag = 'movie-poster';
									}
								}

								document.getElementById('container').scrollTop = 0
							}).then(() => {
								if (movieThumbnail) {
									movieThumbnail.style.pageTransitionTag = '';
								}
							})
            },
          });
				}

				if (navigationType === 'person-to-movie') {
					const personId = fromPath.split('/')[2];
					const movieId = toPath.split('/')[2];

          navigateEvent.intercept({
						scroll: 'manual',
            async handler() {
              const response = await fetch('/fragments/MovieDetails/' + movieId);
              const data = await response.text()
							let thumbnail
							let moviePoster
							let movieThumbnail

							if (!isBack) {
								movieThumbnail = document.getElementById(`movie-poster-${movieId}`);
								if (movieThumbnail) {
									movieThumbnail.style.pageTransitionTag = 'movie-poster';
								}
							}

              transition.start(() => {
								updateTheDOMSomehow(data)

								if (isBack) {
									moviePoster = document.getElementById(`movie-poster`);
									if (moviePoster) {
										moviePoster.classList.remove('movie-poster');
									}

									if (personId) {
										thumbnail = document.getElementById(`person-photo-${personId}`);
										if (thumbnail) {
											thumbnail.scrollIntoViewIfNeeded()
											thumbnail.style.pageTransitionTag = 'person-photo';
										}
									}
								} else {
									document.getElementById('container').scrollTop = 0

									if (movieThumbnail) {
										movieThumbnail.style.pageTransitionTag = '';
									}
								}

							}).then(() => {
								if (thumbnail) {
									thumbnail.style.pageTransitionTag = '';
								}

								if (moviePoster) {
										moviePoster.classList.add('movie-poster');
									}
							});
            },
          });
				}
      });

			function getNavigationType(fromPath, toPath) {
				if (fromPath.startsWith('/movies') && toPath === '/') {
					return 'movie-to-home';
				}

				if (fromPath === '/' && toPath.startsWith('/movies')) {
					return 'home-to-movie';
				}

				if (fromPath.startsWith('/movies') && toPath.startsWith('/people')) {
					return 'movie-to-person';
				}

				if (fromPath.startsWith('/people') && toPath.startsWith('/movies')) {
					return 'person-to-movie';
				}

				return 'other';
			}

			function isBackNavigation(navigateEvent) {
				if (navigateEvent.navigationType === 'push' || navigateEvent.navigationType === 'replace') {
					return false;
				}
				if (
					navigateEvent.destination.index !== -1 &&
					navigateEvent.destination.index < navigation.currentEntry.index
				) {
					return true;
				}
				return false;
			}

      function updateTheDOMSomehow(data) {
        document.getElementById('content').innerHTML = data;
      }

      function shouldNotIntercept(navigationEvent) {
        return (
          navigationEvent.canIntercept === false ||
          // If this is just a hashChange,
          // just let the browser handle scrolling to the content.
          navigationEvent.hashChange ||
          // If this is a download,
          // let the browser perform the download.
          navigationEvent.downloadRequest ||
          // If this is a form submission,
          // let that go to the server.
          navigationEvent.formData
        );
      }
    </script>
	</head>
	<body class="font-sans bg-gray-900 text-white">
		<div class="h-screen overflow-hidden flex flex-col">
			<Nav />
			<div id="container" class="h-full flex-1 overflow-y-auto">
				<div id="content">
					<slot />
				</div>
				<Footer />
			</div>
		</div>
	</body>
</html>
